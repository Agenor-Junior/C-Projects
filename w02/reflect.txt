///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #2 (P2)
Full Name  : Agenor Dionizio da Silva Junior
Student ID#: 138121223
Email      : adionizio-da-silva-j@myseneca.ca
Section    : NRB

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. The problem arises due to the inaccuracy of floating point numbers. Float has less precision than with double. When we multiply price1 by 100, float point may present small errors. When this value is converted to an int, this error affects the converted value. The other values (price2 and price4) work because the double type has more precision, reducing errors during calculations. Also, the value of price3, despite being a float, does not present precision problems in this specific instance, which means that the float value may or may not present problems. So to guarantee better accuracy, a double is a better choice.


2. $%.2lf\n", money / 100.0: Here there's a Arithmetic promotion. Due to one operand (100.0) is a double, the integer money gets implicitly coerced to a double before the division.
   $%.2lf\n", money / (double)100: The integer 100 is explicitly cast to a double. This is an explicit casting. Also, there's a division between an integer and a double, so money is implicitly promoted to double before the operation.
   $%.2lf\n", (double)money / 100: The integer money is explicitly cast to a double, so the division is between two double values.


3.a) The result variable will store the result of integer division money / 100. This division truncates any fractional part, so result is 72.

  b) Sample 1: The division money / 100 is integer division, so the result is 72, but the format specifier %.2lf expects a double, leading to undefined behavior.
     Sample 2: The value displayed will be 72, as the format specifier %d is for integers, and it matches the result of the division.
     Sample 3: As the result is 72, this example has the same issue as Sample 1. There's a format specifier for doubles but providing an integer value.
     Sample 4: The displayed value will be 72 because the format specifier matches the type of the variable result.

 c) I conclude that using an incorrect format specifier in printf can lead to undefined behavior because  this mismatch might be tolerated with the integer being treated as a double, but this behavior is not . For this reason, it's very important to match format specifiers with the correct type of data to ensure a correct output.

